# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

# This workflow will build, test, sign and package a WPF or Windows Forms desktop application
# built on .NET Core.
# To learn how to migrate your existing application to .NET Core,
# refer to https://docs.microsoft.com/en-us/dotnet/desktop-wpf/migration/convert-project-from-net-framework
#
# To configure this workflow:
#
# 1. Configure environment variables
# GitHub sets default environment variables for every workflow run.
# Replace the variables relative to your project in the "env" section below.
#
# 2. Signing
# Generate a signing certificate in the Windows Application
# Packaging Project or add an existing signing certificate to the project.
# Next, use PowerShell to encode the .pfx file using Base64 encoding
# by running the following Powershell script to generate the output string:
#
# $pfx_cert = Get-Content '.\SigningCertificate.pfx' -Encoding Byte
# [System.Convert]::ToBase64String($pfx_cert) | Out-File 'SigningCertificate_Encoded.txt'
#
# Open the output file, SigningCertificate_Encoded.txt, and copy the
# string inside. Then, add the string to the repo as a GitHub secret
# and name it "Base64_Encoded_Pfx."
# For more information on how to configure your signing certificate for
# this workflow, refer to https://github.com/microsoft/github-actions-for-desktop-apps#signing
#
# Finally, add the signing certificate password to the repo as a secret and name it "Pfx_Key".
# See "Build the Windows Application Packaging project" below to see how the secret is used.
#
# For more information on GitHub Actions, refer to https://github.com/features/actions
# For a complete CI/CD sample to get started with GitHub Action workflows for Desktop Applications,
# refer to https://github.com/microsoft/github-actions-for-desktop-apps

name: .NET Core Web Application

on:
  push:
    branches: [ "main", "develop" ]
  pull_request:
    branches: [ "main", "develop" ]

env:
  DOTNET_VERSION: '8.0.x'
  SOLUTION_NAME: 'DoctorSytem.sln'
  PROJECT_NAME: 'DoctorSytem'
  CONFIGURATION: 'Release'

jobs:
  security-scan:
    runs-on: windows-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Run Security Scan
      uses: snyk/actions/dotnet@master
      env:
        SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}

    - name: Run SonarCloud Scan
      uses: SonarSource/sonarcloud-github-action@master
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

  build-and-test:
    needs: security-scan
    runs-on: windows-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Setup .NET Core
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}

    - name: Restore dependencies
      run: dotnet restore ${{ env.SOLUTION_NAME }}

    - name: Build
      run: dotnet build ${{ env.SOLUTION_NAME }} --configuration ${{ env.CONFIGURATION }} --no-restore

    - name: Test
      run: dotnet test ${{ env.SOLUTION_NAME }} --configuration ${{ env.CONFIGURATION }} --no-build --collect:"XPlat Code Coverage"

    - name: Upload coverage reports
      uses: codecov/codecov-action@v3
      with:
        token: ${{ secrets.CODECOV_TOKEN }}

    - name: Publish
      run: dotnet publish ${{ env.SOLUTION_NAME }} --configuration ${{ env.CONFIGURATION }} --output ./publish

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: web-app
        path: ./publish

  database-migration-dev:
    needs: build-and-test
    if: github.ref == 'refs/heads/develop'
    runs-on: windows-latest
    environment: development

    steps:
    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: web-app
        path: ./publish

    - name: Run Database Migrations
      run: |
        dotnet ef database update --project ${{ env.PROJECT_NAME }} --connection "${{ secrets.DEV_DB_CONNECTION_STRING }}"

  deploy-development:
    needs: [build-and-test, database-migration-dev]
    if: github.ref == 'refs/heads/develop'
    runs-on: windows-latest
    environment: 
      name: development
      url: https://doctorsystem-dev.azurewebsites.net

    steps:
    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: web-app
        path: ./publish

    - name: Deploy to Azure Web App
      uses: azure/webapps-deploy@v2
      with:
        app-name: 'doctorsystem-dev'
        publish-profile: ${{ secrets.AZURE_WEBAPP_PUBLISH_PROFILE_DEV }}
        package: ./publish

    - name: Verify deployment
      run: |
        $response = Invoke-WebRequest -Uri ${{ env.URL }} -Method GET
        if ($response.StatusCode -ne 200) { exit 1 }

  database-migration-prod:
    needs: build-and-test
    if: github.ref == 'refs/heads/main'
    runs-on: windows-latest
    environment: production

    steps:
    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: web-app
        path: ./publish

    - name: Run Database Migrations
      run: |
        dotnet ef database update --project ${{ env.PROJECT_NAME }} --connection "${{ secrets.PROD_DB_CONNECTION_STRING }}"

  deploy-production:
    needs: [build-and-test, database-migration-prod]
    if: github.ref == 'refs/heads/main'
    runs-on: windows-latest
    environment: 
      name: production
      url: https://doctorsystem-prod.azurewebsites.net

    steps:
    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: web-app
        path: ./publish

    - name: Deploy to Azure Web App
      uses: azure/webapps-deploy@v2
      with:
        app-name: 'doctorsystem-prod'
        publish-profile: ${{ secrets.AZURE_WEBAPP_PUBLISH_PROFILE_PROD }}
        package: ./publish

    - name: Verify deployment
      run: |
        $response = Invoke-WebRequest -Uri ${{ env.URL }} -Method GET
        if ($response.StatusCode -ne 200) { exit 1 }
